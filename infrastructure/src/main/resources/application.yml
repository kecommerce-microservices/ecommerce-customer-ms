logging:
  level:
    ROOT: WARN
    com.kaua.ecommerce: DEBUG

auth-server:
  token-uri: /oauth2/token

web-client:
  auth-server:
    base-url: "${web-client.auth-server-url}/api"
    read-timeout: 2_000 # milliseconds
    connect-timeout: 2_000 # milliseconds
  users:
    base-url: "${web-client.auth-server-url}/api/v1/users"
    read-timeout: 2_000 # milliseconds
    connect-timeout: 2_000 # milliseconds
  address:
    base-url: "${web-client.address-url}"
    read-timeout: 3_000 # milliseconds
    connect-timeout: 3_000 # milliseconds

jobs:
  client-credentials:
    refresh-rate-minutes: 3
    refresh-initial-delay-minutes: 4

server:
  port: 8081
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  undertow:
    threads:
      worker: 64
      io: 4

spring:
  flyway:
    enabled: false
  datasource:
    url: jdbc:postgresql://${postgres.url}/${postgres.schema}
    username: ${postgres.username}
    password: ${postgres.password}
    hikari:
      auto-commit: false
      connection-timeout: 250
      max-lifetime: 600000
      maximum-pool-size: 20
      minimum-idle: 10
      pool-name: master
  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      "[hibernate.dialect]": org.hibernate.dialect.PostgreSQLDialect
      "[hibernate.generate_statistics]": false
      "[hibernate.connection.provider_disables_autocommit]": true
      hibernate:
        jdbc:
          batch_size: 10
        order_inserts: true
        order_updates: true
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${auth-server.host}/oauth2/jwks
          issuer-uri: ${auth-server.host}

resilience4j.bulkhead:
  configs:
    default:
      maxConcurrentCalls: 25
      maxWaitDuration: 100 # Caso tenha 25 request já com permissão no método, o 26º request vai esperar 100ms para tentar ter permissão, se não conseguir lança uma exception
  instances:
    users:
      baseConfig: default

resilience4j.circuitbreaker: # https://resilience4j.readme.io/docs/circuitbreaker
  configs:
    default: # Ele pega uma quantia de request ou um periodo de tempo, e se a quantidade de falhas / slow call for maior que o limite, ele abre o circuito
      registerHealthIndicator: true # Se ele deve registrar um indicador de saúde
      slidingWindowType: COUNT_BASED # COUNT_BASED ou TIME_BASED - COUNT_BASED é baseado no número de chamadas, TIME_BASED é baseado no tempo de chamada. COUNT_BASED faz a contagem das chamadas e abre o circuito quando atinge o limite de falhas
      slidingWindowSize: 100 # Número de chamadas que ele vai fazer para verificar se o circuito deve ser aberto
      minimumNumberOfCalls: 20 # Número mínimo de chamadas para verificar se o circuito deve ser aberto aqui é em porcentagem, ele abre o circuito quando 20% das chamadas falham
      permittedNumberOfCallsInHalfOpenState: 10 # Número de chamadas permitidas no estado de meio aberto, então em meio aberto ele permite 10 chamadas para ver se o circuito está funcionando e se ele deve fechar ou abrir novamente
      automaticTransitionFromOpenToHalfOpenEnabled: false # Se ele deve fazer a transição automática do estado aberto para o meio aberto, ele cria um thread só pra verificar isso, mas como sempre vai vir mais 1 request, não é necessário
      waitDurationInOpenState: 30s # Tempo que ele vai esperar para fazer a transição do estado aberto para o meio aberto
      failureRateThreshold: 50 # 50% configura o limte de falhas para abrir o circuito em porcentagem, deve ser igual ou maior, ele abre o circuito quando 50% das chamadas falham
      slowCallRateThreshold: 70 # 70% configura o limte de chamadas lentas para abrir o circuito em porcentagem, deve ser igual ou maior, ele abre o circuito quando 50% das chamadas são lentas
      slowCallDurationThreshold: 1s # 1 segundos configura o tempo de chamada lenta, ele abre o circuito quando 50% das chamadas são lentas, aqui configuramos o tempo máximo que uma chamada pode demorar para ser considerada lenta
      recordExceptions: # Aqui configuramos as exceptions que ele vai considerar como falha
        - com.kaua.ecommerce.lib.domain.exceptions.InternalErrorException
        - com.kaua.ecommerce.lib.infrastructure.exceptions.ForbiddenException
        - com.kaua.ecommerce.lib.domain.exceptions.NotFoundException
        - com.kaua.ecommerce.lib.infrastructure.exceptions.UnauthorizedException
        - com.kaua.ecommerce.lib.infrastructure.exceptions.ConflictException
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - org.springframework.web.reactive.function.client.WebClientResponseException
        - org.springframework.web.reactive.function.client.WebClientException
        - org.springframework.web.reactive.function.client.WebClientResponseException.BadGateway
        - org.springframework.web.reactive.function.client.WebClientResponseException.GatewayTimeout
        - org.springframework.web.reactive.function.client.WebClientResponseException.InternalServerError
        - org.springframework.web.reactive.function.client.WebClientResponseException.ServiceUnavailable
        - java.io.IOException
        - java.net.SocketTimeoutException
  instances:
    users:
      baseConfig: default

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 250
      retryExceptions:
        - com.kaua.ecommerce.lib.domain.exceptions.InternalErrorException
        - com.kaua.ecommerce.lib.infrastructure.exceptions.ForbiddenException
        - com.kaua.ecommerce.lib.domain.exceptions.NotFoundException
        - com.kaua.ecommerce.lib.infrastructure.exceptions.UnauthorizedException
        - com.kaua.ecommerce.lib.infrastructure.exceptions.ConflictException
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - org.springframework.web.reactive.function.client.WebClientResponseException
        - org.springframework.web.reactive.function.client.WebClientException
        - org.springframework.web.reactive.function.client.WebClientResponseException.BadGateway
        - org.springframework.web.reactive.function.client.WebClientResponseException.GatewayTimeout
        - org.springframework.web.reactive.function.client.WebClientResponseException.InternalServerError
        - org.springframework.web.reactive.function.client.WebClientResponseException.ServiceUnavailable
        - java.io.IOException
        - java.net.SocketTimeoutException
    authServerConfig:
      maxAttempts: 5
  instances:
    users:
      baseConfig: default
    AuthServer:
      baseConfig: authServerConfig